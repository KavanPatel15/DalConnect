package com.Group10.SocialMediaPlatform.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Data
@Entity
@Table(name = "Users")
@NoArgsConstructor
@AllArgsConstructor
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer userId; // Unique identifier for the user

    @Column(nullable = false, unique = true)
    private String email; // User's email, must be unique and cannot be null

    @Column(nullable = false)
    private String password; // User's password, cannot be null

    @Column(nullable = false)
    private String role; // User's role, e.g., 'admin', 'user', etc.

    @Column(nullable = false)
    private String firstName; // User's first name, cannot be null

    @Column(nullable = false)
    private String lastName; // User's last name, cannot be null

    @Column(nullable = false)
    private String accountStatus = "activated"; // User's account status, default is 'activated'

    @Column(nullable = false)
    private String status = "available"; // User's online/offline status, default is 'available'

    @Column(nullable = false)
    private String securityQuestion; // User's security question for password reset, cannot be null

    @Column(nullable = false)
    private String securityAnswer; // Answer to the security question, cannot be null

    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt; // Timestamp when the user was created, cannot be updated

    @Column(nullable = false)
    private LocalDateTime updatedAt; // Timestamp when the user was last updated

    @Column(nullable = false)
    private boolean approved = false; // Whether the user is approved or not, default is false

    @Column(nullable = false)
    private boolean deleted = false; // Whether the user is marked as deleted or not, default is false

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnore
    private Profile profile; // One-to-one relationship with Profile entity, cascade all operations and remove orphan profiles

    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JsonIgnore
    private List<Post> posts; // One-to-many relationship with Post entity, lazy fetching and cascade all operations

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now(); // Set creation timestamp before persisting
        updatedAt = LocalDateTime.now(); // Set update timestamp before persisting
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now(); // Update timestamp before updating the entity
    }

    public boolean isApproved() {
        return approved; // Getter for approved status
    }

    public void setApproved(boolean approved) {
        this.approved = approved; // Setter for approved status
    }

    // Getters and setters for other fields are automatically generated by Lombok's @Data annotation
}
